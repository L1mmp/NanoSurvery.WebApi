// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NanoSurvery.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NanoSurvery.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("628b5479-d062-4a7f-9380-ad791d9d18ed"),
                            QuestionId = new Guid("fec4dd00-ba69-4e4b-90b2-aa6832c55ca4"),
                            Text = "Answer 1"
                        },
                        new
                        {
                            Id = new Guid("70200c8e-d7ab-4f4e-9641-91715415100b"),
                            QuestionId = new Guid("fec4dd00-ba69-4e4b-90b2-aa6832c55ca4"),
                            Text = "Answer 2"
                        },
                        new
                        {
                            Id = new Guid("f818655b-7053-40d9-893f-220a894b89ac"),
                            QuestionId = new Guid("fec4dd00-ba69-4e4b-90b2-aa6832c55ca4"),
                            Text = "Answer 3"
                        },
                        new
                        {
                            Id = new Guid("9a8f40ac-35e8-4d4b-90b0-fbaa5babf261"),
                            QuestionId = new Guid("4f16b568-939a-46ae-b008-e974c619bafa"),
                            Text = "Answer 1"
                        },
                        new
                        {
                            Id = new Guid("e4280494-dc08-40d0-a81d-be55905a52c5"),
                            QuestionId = new Guid("4f16b568-939a-46ae-b008-e974c619bafa"),
                            Text = "Answer 2"
                        },
                        new
                        {
                            Id = new Guid("00005347-5f69-4914-b0ff-a3d7932c9989"),
                            QuestionId = new Guid("fa41fab7-25be-4b2b-a97a-546b0989798e"),
                            Text = "Answer 1"
                        },
                        new
                        {
                            Id = new Guid("9dd62573-7feb-4388-aa87-ce1b3721d026"),
                            QuestionId = new Guid("fa41fab7-25be-4b2b-a97a-546b0989798e"),
                            Text = "Answer 2"
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.AnswerInterviewResult", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<long>("AnswerCount")
                        .HasColumnType("bigint");

                    b.Property<string>("AnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("QuestionId", "AnswerId");

                    b.ToTable((string)null);

                    b.ToView("AnswerInterviewResults", (string)null);
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.AnswerInterviews", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.HasKey("AnswerId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.ToTable("AnswerInterviews");

                    b.HasData(
                        new
                        {
                            AnswerId = new Guid("628b5479-d062-4a7f-9380-ad791d9d18ed"),
                            InterviewId = new Guid("a89b3485-c256-45d4-baf2-9c9edd369e12")
                        },
                        new
                        {
                            AnswerId = new Guid("9a8f40ac-35e8-4d4b-90b0-fbaa5babf261"),
                            InterviewId = new Guid("a89b3485-c256-45d4-baf2-9c9edd369e12")
                        },
                        new
                        {
                            AnswerId = new Guid("00005347-5f69-4914-b0ff-a3d7932c9989"),
                            InterviewId = new Guid("543312b1-f6c5-43c0-9255-ee129a4bb3d4")
                        },
                        new
                        {
                            AnswerId = new Guid("f818655b-7053-40d9-893f-220a894b89ac"),
                            InterviewId = new Guid("0d25387d-262d-43ca-86ec-a7098ea77d2a")
                        },
                        new
                        {
                            AnswerId = new Guid("e4280494-dc08-40d0-a81d-be55905a52c5"),
                            InterviewId = new Guid("0d25387d-262d-43ca-86ec-a7098ea77d2a")
                        },
                        new
                        {
                            AnswerId = new Guid("9dd62573-7feb-4388-aa87-ce1b3721d026"),
                            InterviewId = new Guid("7ec8fc0c-f782-4349-97ec-1a4d55fdb8c2")
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CurrentQuestionNumber")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("Interviews");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a89b3485-c256-45d4-baf2-9c9edd369e12"),
                            CurrentQuestionNumber = 0,
                            IsFinished = false,
                            SurveyId = new Guid("e39480d3-7fd9-4d77-ba5d-75cebbb4d591"),
                            UserId = new Guid("eb147c56-5ff1-45d8-adca-39c4d0871e31")
                        },
                        new
                        {
                            Id = new Guid("0d25387d-262d-43ca-86ec-a7098ea77d2a"),
                            CurrentQuestionNumber = 0,
                            IsFinished = false,
                            SurveyId = new Guid("e39480d3-7fd9-4d77-ba5d-75cebbb4d591"),
                            UserId = new Guid("f7483e73-155d-42f2-8d1c-6feb0592c5d5")
                        },
                        new
                        {
                            Id = new Guid("543312b1-f6c5-43c0-9255-ee129a4bb3d4"),
                            CurrentQuestionNumber = 0,
                            IsFinished = false,
                            SurveyId = new Guid("40c1d1c2-6184-4a70-a92e-4c0a3dabcb9e"),
                            UserId = new Guid("eb147c56-5ff1-45d8-adca-39c4d0871e31")
                        },
                        new
                        {
                            Id = new Guid("7ec8fc0c-f782-4349-97ec-1a4d55fdb8c2"),
                            CurrentQuestionNumber = 0,
                            IsFinished = false,
                            SurveyId = new Guid("40c1d1c2-6184-4a70-a92e-4c0a3dabcb9e"),
                            UserId = new Guid("f7483e73-155d-42f2-8d1c-6feb0592c5d5")
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fec4dd00-ba69-4e4b-90b2-aa6832c55ca4"),
                            Number = 0,
                            SurveyId = new Guid("e39480d3-7fd9-4d77-ba5d-75cebbb4d591"),
                            Title = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("4f16b568-939a-46ae-b008-e974c619bafa"),
                            Number = 1,
                            SurveyId = new Guid("e39480d3-7fd9-4d77-ba5d-75cebbb4d591"),
                            Title = "Question 2"
                        },
                        new
                        {
                            Id = new Guid("fa41fab7-25be-4b2b-a97a-546b0989798e"),
                            Number = 0,
                            SurveyId = new Guid("40c1d1c2-6184-4a70-a92e-4c0a3dabcb9e"),
                            Title = "Question 1"
                        },
                        new
                        {
                            Id = new Guid("4e0e07b0-80d0-4c17-902e-267cb514dec8"),
                            Number = 1,
                            SurveyId = new Guid("40c1d1c2-6184-4a70-a92e-4c0a3dabcb9e"),
                            Title = "Question 2"
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e39480d3-7fd9-4d77-ba5d-75cebbb4d591"),
                            CreatedOn = new DateTime(2023, 7, 23, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8506),
                            Description = "Description for Survey 1",
                            Title = "Survey 1"
                        },
                        new
                        {
                            Id = new Guid("40c1d1c2-6184-4a70-a92e-4c0a3dabcb9e"),
                            CreatedOn = new DateTime(2023, 7, 23, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8509),
                            Description = "Description for Survey 2",
                            Title = "Survey 2"
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb147c56-5ff1-45d8-adca-39c4d0871e31"),
                            Password = "password1",
                            TokenCreated = new DateTime(2023, 7, 23, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8618),
                            TokenExpires = new DateTime(2023, 7, 30, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8618),
                            Username = "user1"
                        },
                        new
                        {
                            Id = new Guid("f7483e73-155d-42f2-8d1c-6feb0592c5d5"),
                            Password = "password2",
                            TokenCreated = new DateTime(2023, 7, 23, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8624),
                            TokenExpires = new DateTime(2023, 7, 30, 9, 29, 49, 93, DateTimeKind.Utc).AddTicks(8624),
                            Username = "user2"
                        });
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Answer", b =>
                {
                    b.HasOne("NanoSurvery.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.AnswerInterviews", b =>
                {
                    b.HasOne("NanoSurvery.Domain.Entities.Answer", "Answer")
                        .WithMany("Interviews")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanoSurvery.Domain.Entities.Interview", "Interview")
                        .WithMany("Answers")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Interview");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Interview", b =>
                {
                    b.HasOne("NanoSurvery.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NanoSurvery.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Question", b =>
                {
                    b.HasOne("NanoSurvery.Domain.Entities.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Answer", b =>
                {
                    b.Navigation("Interviews");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("NanoSurvery.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
